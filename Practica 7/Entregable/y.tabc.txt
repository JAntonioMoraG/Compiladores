/*
DATOS
*Mora Guzman Jose Antonio
*Practica 7 funciones y procedimientos
*Opcion calculadora vectores
*fecha 1-dic-2021
*grupo 3CM17
*materia: compiladores
*/

#define YY_parse_h_included
/*#define YY_USE_CLASS 
*/
/*  A Bison++ parser, made from hoc4.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */


#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#line 10 "hoc4.y"

#include <stdio.h>
#include <math.h>
#include "vector_cal.h"
#define code2(c1,c2) 		code(c1); code(c2)
#define code3(c1,c2,c3)		code(c1); code(c2); code(c3)

void warning(char *s, char *t);
int yyerror (char *s);
void execerror(char *s, char *t);
void run();
int indef;


#line 26 "hoc4.y"
typedef union{
	Symbol *sym; /*apuntador de la tabla de símbolos*/
	Inst *inst; /* instrucción de máquina*/
	double val;
	Vector *vec;
	int narg;/*Nùmero de argumentos*/
} yy_parse_stype;
#define YY_parse_STYPE yy_parse_stype
#ifndef YY_USE_CLASS
#define YYSTYPE yy_parse_stype
#endif

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_parse_BISON 1

#ifndef YY_parse_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_parse_COMPATIBILITY 1
 #else
  #define  YY_parse_COMPATIBILITY 0
 #endif
#endif

#if YY_parse_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_parse_LTYPE
   #define YY_parse_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_parse_STYPE 
   #define YY_parse_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_parse_DEBUG
   #define  YY_parse_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_parse_USE_GOTO
  #define YY_parse_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_parse_USE_GOTO
 #define YY_parse_USE_GOTO 0
#endif

#ifndef YY_parse_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_parse_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_parse_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_parse_DEBUG */
#endif


#ifndef YY_parse_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_parse_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_parse_LSP_NEEDED
#ifndef YY_parse_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_parse_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_parse_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_parse_STYPE
#define YY_parse_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_parse_PARSE
#define YY_parse_PARSE yyparse
#endif
#ifndef YY_parse_LEX
#define YY_parse_LEX yylex
#endif
#ifndef YY_parse_LVAL
#define YY_parse_LVAL yylval
#endif
#ifndef YY_parse_LLOC
#define YY_parse_LLOC yylloc
#endif
#ifndef YY_parse_CHAR
#define YY_parse_CHAR yychar
#endif
#ifndef YY_parse_NERRS
#define YY_parse_NERRS yynerrs
#endif
#ifndef YY_parse_DEBUG_FLAG
#define YY_parse_DEBUG_FLAG yydebug
#endif
#ifndef YY_parse_ERROR
#define YY_parse_ERROR yyerror
#endif

#ifndef YY_parse_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_parse_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_parse_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_parse_PARSE_PARAM
  #define YY_parse_PARSE_PARAM void
 #endif
#endif

#if YY_parse_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_parse_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_parse_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_parse_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_parse_PURE
#  ifndef YYPURE
#    define YYPURE YY_parse_PURE
#  endif
#endif

#ifdef YY_parse_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_parse_DEBUG 
#  endif
#endif

#ifndef YY_parse_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_parse_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_parse_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_parse_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	VAR	258
#define	BLTIN	259
#define	INDEF	260
#define	VEC	261
#define	NUMERO	262
#define	WHILE	263
#define	IF	264
#define	ELSE	265
#define	PRINT	266
#define	STRING	267
#define	FUNCTION	268
#define	PROCEDURE	269
#define	RETURN	270
#define	FUNC	271
#define	PROC	272
#define	READ	273
#define	ARG	274
#define	NUMBER	275
#define	OR	276
#define	AND	277
#define	GT	278
#define	GE	279
#define	LT	280
#define	LE	281
#define	EQ	282
#define	NE	283
#define	NOT	284


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_parse_CLASS
#define YY_parse_CLASS parse
#endif
#ifndef YY_parse_INHERIT
#define YY_parse_INHERIT
#endif
#ifndef YY_parse_MEMBERS
#define YY_parse_MEMBERS 
#endif
#ifndef YY_parse_LEX_BODY
#define YY_parse_LEX_BODY  
#endif
#ifndef YY_parse_ERROR_BODY
#define YY_parse_ERROR_BODY  
#endif
#ifndef YY_parse_CONSTRUCTOR_PARAM
#define YY_parse_CONSTRUCTOR_PARAM
#endif
#ifndef YY_parse_CONSTRUCTOR_CODE
#define YY_parse_CONSTRUCTOR_CODE
#endif
#ifndef YY_parse_CONSTRUCTOR_INIT
#define YY_parse_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_parse_USE_CONST_TOKEN
#define YY_parse_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_parse_USE_CONST_TOKEN != 0
#ifndef YY_parse_ENUM_TOKEN
#define YY_parse_ENUM_TOKEN yy_parse_enum_token
#endif
#endif

class YY_parse_CLASS YY_parse_INHERIT
{
public: 
#if YY_parse_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int VAR;
static const int BLTIN;
static const int INDEF;
static const int VEC;
static const int NUMERO;
static const int WHILE;
static const int IF;
static const int ELSE;
static const int PRINT;
static const int STRING;
static const int FUNCTION;
static const int PROCEDURE;
static const int RETURN;
static const int FUNC;
static const int PROC;
static const int READ;
static const int ARG;
static const int NUMBER;
static const int OR;
static const int AND;
static const int GT;
static const int GE;
static const int LT;
static const int LE;
static const int EQ;
static const int NE;
static const int NOT;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_parse_ENUM_TOKEN { YY_parse_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,VAR=258
	,BLTIN=259
	,INDEF=260
	,VEC=261
	,NUMERO=262
	,WHILE=263
	,IF=264
	,ELSE=265
	,PRINT=266
	,STRING=267
	,FUNCTION=268
	,PROCEDURE=269
	,RETURN=270
	,FUNC=271
	,PROC=272
	,READ=273
	,ARG=274
	,NUMBER=275
	,OR=276
	,AND=277
	,GT=278
	,GE=279
	,LT=280
	,LE=281
	,EQ=282
	,NE=283
	,NOT=284


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_parse_PARSE (YY_parse_PARSE_PARAM);
 virtual void YY_parse_ERROR(char *msg) YY_parse_ERROR_BODY;
#ifdef YY_parse_PURE
#ifdef YY_parse_LSP_NEEDED
 virtual int  YY_parse_LEX (YY_parse_STYPE *YY_parse_LVAL,YY_parse_LTYPE *YY_parse_LLOC) YY_parse_LEX_BODY;
#else
 virtual int  YY_parse_LEX (YY_parse_STYPE *YY_parse_LVAL) YY_parse_LEX_BODY;
#endif
#else
 virtual int YY_parse_LEX() YY_parse_LEX_BODY;
 YY_parse_STYPE YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
 YY_parse_LTYPE YY_parse_LLOC;
#endif
 int   YY_parse_NERRS;
 int    YY_parse_CHAR;
#endif
#if YY_parse_DEBUG != 0
 int YY_parse_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_parse_CLASS(YY_parse_CONSTRUCTOR_PARAM);
public:
 YY_parse_MEMBERS 
};
/* other declare folow */
#if YY_parse_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_parse_CLASS::VAR=258;
const int YY_parse_CLASS::BLTIN=259;
const int YY_parse_CLASS::INDEF=260;
const int YY_parse_CLASS::VEC=261;
const int YY_parse_CLASS::NUMERO=262;
const int YY_parse_CLASS::WHILE=263;
const int YY_parse_CLASS::IF=264;
const int YY_parse_CLASS::ELSE=265;
const int YY_parse_CLASS::PRINT=266;
const int YY_parse_CLASS::STRING=267;
const int YY_parse_CLASS::FUNCTION=268;
const int YY_parse_CLASS::PROCEDURE=269;
const int YY_parse_CLASS::RETURN=270;
const int YY_parse_CLASS::FUNC=271;
const int YY_parse_CLASS::PROC=272;
const int YY_parse_CLASS::READ=273;
const int YY_parse_CLASS::ARG=274;
const int YY_parse_CLASS::NUMBER=275;
const int YY_parse_CLASS::OR=276;
const int YY_parse_CLASS::AND=277;
const int YY_parse_CLASS::GT=278;
const int YY_parse_CLASS::GE=279;
const int YY_parse_CLASS::LT=280;
const int YY_parse_CLASS::LE=281;
const int YY_parse_CLASS::EQ=282;
const int YY_parse_CLASS::NE=283;
const int YY_parse_CLASS::NOT=284;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_parse_CLASS::token */
#endif
/*apres const  */
YY_parse_CLASS::YY_parse_CLASS(YY_parse_CONSTRUCTOR_PARAM) YY_parse_CONSTRUCTOR_INIT
{
#if YY_parse_DEBUG != 0
YY_parse_DEBUG_FLAG=0;
#endif
YY_parse_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		125
#define	YYFLAG		-32768
#define	YYNTBASE	44

#define YYTRANSLATE(x) ((unsigned)(x) <= 284 ? yytranslate[x] : 61)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    35,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    24,     2,     2,     2,     2,    39,
    40,    23,    21,    41,    22,    25,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    36,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    42,     2,    43,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    37,     2,    38,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    26,    27,    28,    29,    30,
    31,    32,    33,    34
};

#if YY_parse_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     8,    12,    16,    20,    24,    28,    32,
    34,    36,    39,    42,    47,    52,    60,    64,    68,    70,
    72,    73,    74,    77,    80,    82,    84,    86,    88,    94,
    99,   104,   108,   112,   116,   120,   124,   128,   132,   136,
   140,   144,   148,   152,   156,   160,   163,   169,   170,   172,
   174,   178,   182,   183,   190,   191,   198,   200,   202,   204,
   205,   207,   211
};

static const short yyrhs[] = {    -1,
    44,    35,     0,    44,    55,    35,     0,    44,    45,    35,
     0,    44,    46,    35,     0,    44,    52,    35,     0,    44,
     1,    35,     0,     3,    36,    52,     0,    19,    36,    52,
     0,    52,     0,    15,     0,    15,    52,     0,    11,    54,
     0,    48,    47,    46,    50,     0,    49,    47,    46,    50,
     0,    49,    47,    46,    50,    10,    46,    50,     0,    37,
    51,    38,     0,    39,    52,    40,     0,     8,     0,     9,
     0,     0,     0,    51,    35,     0,    51,    46,     0,    60,
     0,     3,     0,    19,     0,    45,     0,    13,    53,    39,
    59,    40,     0,    18,    39,     3,    40,     0,     4,    39,
    52,    40,     0,    52,    21,    52,     0,    52,    22,    52,
     0,    52,    25,    52,     0,    52,    23,    20,     0,    20,
    23,    52,     0,    52,    24,    52,     0,    52,    28,    52,
     0,    52,    29,    52,     0,    52,    30,    52,     0,    52,
    31,    52,     0,    52,    32,    52,     0,    52,    33,    52,
     0,    52,    27,    52,     0,    52,    26,    52,     0,    34,
    52,     0,    14,    53,    39,    59,    40,     0,     0,    52,
     0,    12,     0,    54,    41,    52,     0,    54,    41,    12,
     0,     0,    16,    58,    56,    39,    40,    46,     0,     0,
    17,    58,    57,    39,    40,    46,     0,     3,     0,    13,
     0,    14,     0,     0,    52,     0,    59,    41,    52,     0,
    42,    20,    20,    20,    43,     0
};

#endif

#if (YY_parse_DEBUG != 0) || defined(YY_parse_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
    55,    56,    57,    58,    59,    60,    61,    64,    65,    68,
    69,    70,    72,    73,    77,    82,    86,    90,    93,    96,
    99,   102,   103,   104,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   132,   135,   136,
   137,   138,   141,   142,   143,   144,   148,   149,   150,   153,
   154,   155,   158
};

static const char * const yytname[] = {   "$","error","$illegal.","VAR","BLTIN",
"INDEF","VEC","NUMERO","WHILE","IF","ELSE","PRINT","STRING","FUNCTION","PROCEDURE",
"RETURN","FUNC","PROC","READ","ARG","NUMBER","'+'","'-'","'*'","'#'","'.'","OR",
"AND","GT","GE","LT","LE","EQ","NE","NOT","'\\n'","'='","'{'","'}'","'('","')'",
"','","'['","']'","list","asgn","stmt","cond","while","if","end","stmtlist",
"exp","begin","prlist","defn","@1","@2","procname","arglist","vector",""
};
#endif

static const short yyr1[] = {     0,
    44,    44,    44,    44,    44,    44,    44,    45,    45,    46,
    46,    46,    46,    46,    46,    46,    46,    47,    48,    49,
    50,    51,    51,    51,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    52,    52,    53,    54,    54,
    54,    54,    56,    55,    57,    55,    58,    58,    58,    59,
    59,    59,    60
};

static const short yyr2[] = {     0,
     0,     2,     3,     3,     3,     3,     3,     3,     3,     1,
     1,     2,     2,     4,     4,     7,     3,     3,     1,     1,
     0,     0,     2,     2,     1,     1,     1,     1,     5,     4,
     4,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     2,     5,     0,     1,     1,
     3,     3,     0,     6,     0,     6,     1,     1,     1,     0,
     1,     3,     5
};

static const short yydefact[] = {     1,
     0,     0,    26,     0,    19,    20,     0,    48,    48,    11,
     0,     0,     0,    27,     0,     0,     2,    22,     0,    28,
     0,     0,     0,     0,     0,    25,     7,     0,     0,    50,
    28,    49,    13,     0,     0,    12,    57,    58,    59,    53,
    55,     0,     0,     0,    46,     0,     0,     4,     5,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     6,     3,     8,     0,     0,
    60,    60,     0,     0,     0,     9,    36,    23,    17,    24,
    10,     0,     0,    21,    21,    32,    33,    35,    37,    34,
    45,    44,    38,    39,    40,    41,    42,    43,    31,    52,
    51,    61,     0,     0,     0,     0,    30,     0,    18,    14,
    15,    29,     0,    47,     0,     0,    63,     0,    62,    54,
    56,    21,    16,     0,     0
};

static const short yydefgoto[] = {     1,
    31,    21,    51,    22,    23,   110,    46,    81,    34,    33,
    25,    73,    74,    40,   103,    26
};

static const short yypact[] = {-32768,
    79,   -34,   -32,   -27,-32768,-32768,     4,-32768,-32768,   167,
     0,     0,   -18,     1,    17,   167,-32768,-32768,    21,     9,
    10,     8,     8,   229,    13,-32768,-32768,   167,   167,-32768,
-32768,   244,    24,    11,    12,   244,-32768,-32768,-32768,-32768,
-32768,    51,   167,   167,-32768,   114,    46,-32768,-32768,   167,
   127,   127,   167,   167,    47,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,-32768,-32768,   244,   189,   154,
   167,   167,    29,    33,    36,   244,   254,-32768,-32768,-32768,
   244,    53,   209,-32768,-32768,    77,    77,-32768,     3,     3,
   162,   174,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   244,   244,   -21,   -15,    38,    41,-32768,    42,-32768,-32768,
    74,-32768,   167,-32768,   127,   127,-32768,   127,   244,-32768,
-32768,-32768,-32768,    86,-32768
};

static const short yypgoto[] = {-32768,
    88,   -41,    68,-32768,-32768,   -83,-32768,    -1,   102,-32768,
-32768,-32768,-32768,   103,    48,-32768
};


#define	YYLAST		287


static const short yytable[] = {    24,
    27,   111,    37,    28,    80,    32,     3,     4,    36,    84,
    85,    29,    38,    39,    45,    30,     8,     9,   112,   113,
    42,    13,    14,    15,   114,   113,    68,    69,    58,    59,
    60,    61,    62,    63,    64,    65,    43,    16,   123,    44,
    47,    76,    77,    48,    49,    19,    50,    67,    83,    71,
    72,    86,    87,    75,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    70,    82,    88,   105,   101,   102,
   102,   106,   108,   120,   121,   107,   122,   115,   124,     2,
   116,     3,     4,   118,   117,   125,     5,     6,    20,     7,
    52,     8,     9,    10,    11,    12,    13,    14,    15,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    35,   119,    16,    17,    41,    18,     3,     4,     0,   104,
    19,     5,     6,     0,     7,     0,     8,     9,    10,     3,
     4,    13,    14,    15,     5,     6,     0,     7,     0,     8,
     9,    10,     0,     0,    13,    14,    15,    16,    78,     0,
    18,    79,     0,     0,     0,    19,     3,     4,     0,     0,
    16,     0,     0,    18,     0,   100,     8,     9,    19,     3,
     4,    13,    14,    15,     0,     0,     0,     0,     0,     8,
     9,     0,     0,     0,    13,    14,    15,    16,    59,    60,
    61,    62,    63,    64,    65,    19,     0,     0,     0,     0,
    16,    60,    61,    62,    63,    64,    65,     0,    19,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,     0,     0,     0,     0,     0,     0,    99,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,     0,     0,     0,     0,     0,     0,   109,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,     0,    66,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65
};

static const short yycheck[] = {     1,
    35,    85,     3,    36,    46,     7,     3,     4,    10,    51,
    52,    39,    13,    14,    16,    12,    13,    14,    40,    41,
    39,    18,    19,    20,    40,    41,    28,    29,    26,    27,
    28,    29,    30,    31,    32,    33,    36,    34,   122,    23,
    20,    43,    44,    35,    35,    42,    39,    35,    50,    39,
    39,    53,    54,     3,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    41,    20,    20,    39,    70,    71,
    72,    39,    20,   115,   116,    40,   118,    40,     0,     1,
    40,     3,     4,    10,    43,     0,     8,     9,     1,    11,
    23,    13,    14,    15,    16,    17,    18,    19,    20,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
     9,   113,    34,    35,    12,    37,     3,     4,    -1,    72,
    42,     8,     9,    -1,    11,    -1,    13,    14,    15,     3,
     4,    18,    19,    20,     8,     9,    -1,    11,    -1,    13,
    14,    15,    -1,    -1,    18,    19,    20,    34,    35,    -1,
    37,    38,    -1,    -1,    -1,    42,     3,     4,    -1,    -1,
    34,    -1,    -1,    37,    -1,    12,    13,    14,    42,     3,
     4,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    13,
    14,    -1,    -1,    -1,    18,    19,    20,    34,    27,    28,
    29,    30,    31,    32,    33,    42,    -1,    -1,    -1,    -1,
    34,    28,    29,    30,    31,    32,    33,    -1,    42,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    -1,    35,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_parse_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_parse_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_parse_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_parse_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_parse_CHAR = (token), YY_parse_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_parse_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_parse_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_parse_PURE
/* UNPURE */
#define YYLEX           YY_parse_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_parse_CHAR;                      /*  the lookahead symbol        */
YY_parse_STYPE      YY_parse_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_parse_NERRS;                 /*  number of parse errors so far */
#ifdef YY_parse_LSP_NEEDED
YY_parse_LTYPE YY_parse_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_parse_LSP_NEEDED
#define YYLEX           YY_parse_LEX(&YY_parse_LVAL, &YY_parse_LLOC)
#else
#define YYLEX           YY_parse_LEX(&YY_parse_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_parse_DEBUG != 0
int YY_parse_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_parse_CLASS::
#endif
     YY_parse_PARSE(YY_parse_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_parse_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_parse_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_parse_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_parse_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_parse_LSP_NEEDED
  YY_parse_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_parse_LTYPE *yyls = yylsa;
  YY_parse_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_parse_PURE
  int YY_parse_CHAR;
  YY_parse_STYPE YY_parse_LVAL;
  int YY_parse_NERRS;
#ifdef YY_parse_LSP_NEEDED
  YY_parse_LTYPE YY_parse_LLOC;
#endif
#endif

  YY_parse_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_parse_NERRS = 0;
  YY_parse_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_parse_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_parse_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_parse_LSP_NEEDED
      YY_parse_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_parse_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_parse_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_parse_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_parse_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_parse_LSP_NEEDED
      yyls = (YY_parse_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_parse_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_parse_CHAR == YYEMPTY)
    {
#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_parse_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_parse_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_parse_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_parse_CHAR);

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_parse_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_parse_CHAR, YY_parse_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_parse_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_parse_CHAR != YYEOF)
    YY_parse_CHAR = YYEMPTY;

  *++yyvsp = YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
  *++yylsp = YY_parse_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 4:
#line 58 "hoc4.y"
{code2(pop,STOP); return 1;;
    break;}
case 5:
#line 59 "hoc4.y"
{code(STOP); return 1;;
    break;}
case 6:
#line 60 "hoc4.y"
{code2(print,STOP); return 1;;
    break;}
case 7:
#line 61 "hoc4.y"
{yyerror;;
    break;}
case 8:
#line 64 "hoc4.y"
{yyval.inst = yyvsp[0].inst; code3(varpush,(Inst)yyvsp[-2].sym,assign);;
    break;}
case 9:
#line 65 "hoc4.y"
{defonly("$");code2(argassign,(Inst)yyvsp[-2].narg); yyval.inst = yyvsp[0].inst;;
    break;}
case 10:
#line 68 "hoc4.y"
{code(pop);;
    break;}
case 11:
#line 69 "hoc4.y"
{defonly("return");code(procret);;
    break;}
case 12:
#line 70 "hoc4.y"
{defonly("return");yyval.inst=yyvsp[0].inst;code(funcret);;
    break;}
case 13:
#line 72 "hoc4.y"
{ yyval.inst  = yyvsp[0].inst;;
    break;}
case 14:
#line 73 "hoc4.y"
{
											(yyvsp[-3].inst)[1] = (Inst)yyvsp[-1].inst;  /* cuerpo de la iteración*/
											(yyvsp[-3].inst)[2] = (Inst)yyvsp[0].inst;  /* terminar si la condición no se cumple*/;
    break;}
case 15:
#line 77 "hoc4.y"
{ /* proposición if que no emplea else*/
				
											(yyvsp[-3].inst)[1] = (Inst)yyvsp[-1].inst; /* parte then */
											(yyvsp[-3].inst)[3] = (Inst)yyvsp[0].inst; ;
    break;}
case 16:
#line 82 "hoc4.y"
{ /* proposición if ocn parte else*/
											(yyvsp[-6].inst)[1] = (Inst)yyvsp[-4].inst; /*parte then*/
											(yyvsp[-6].inst)[2] = (Inst)yyvsp[-1].inst; /*paret else*/
											(yyvsp[-6].inst)[3] = (Inst)yyvsp[0].inst; ;
    break;}
case 17:
#line 86 "hoc4.y"
{ yyval.inst = yyvsp[-1].inst;;
    break;}
case 18:
#line 90 "hoc4.y"
{code(STOP); yyval.inst = yyvsp[-1].inst;;
    break;}
case 19:
#line 93 "hoc4.y"
{ yyval.inst = code3(whilecode,STOP,STOP);;
    break;}
case 20:
#line 96 "hoc4.y"
{ yyval.inst = code(ifcode); code3(STOP,STOP,STOP);;
    break;}
case 21:
#line 99 "hoc4.y"
{code(STOP); yyval.inst = progp; ;
    break;}
case 22:
#line 102 "hoc4.y"
{yyval.inst = progp;;
    break;}
case 25:
#line 107 "hoc4.y"
{yyval.inst = code2(constpush, (Inst)yyvsp[0].sym);;
    break;}
case 26:
#line 108 "hoc4.y"
{yyval.inst = code3(varpush,(Inst)yyvsp[0].sym,eval);;
    break;}
case 27:
#line 109 "hoc4.y"
{defonly("$"); yyval.inst = code2(arg,(Inst)yyvsp[0].narg);;
    break;}
case 29:
#line 111 "hoc4.y"
{ yyval.inst = yyvsp[-3].inst; code3(call,(Inst)yyvsp[-4].sym,(Inst)yyvsp[-1].narg);;
    break;}
case 30:
#line 112 "hoc4.y"
{yyval.inst= code2(varread,(Inst)yyvsp[-1].sym);;
    break;}
case 31:
#line 113 "hoc4.y"
{code2(bltin,(Inst)yyvsp[-3].sym->u.ptr);;
    break;}
case 32:
#line 114 "hoc4.y"
{code(add);;
    break;}
case 33:
#line 115 "hoc4.y"
{code(sub);;
    break;}
case 34:
#line 116 "hoc4.y"
{code(punto);;
    break;}
case 35:
#line 117 "hoc4.y"
{code(mul);;
    break;}
case 36:
#line 118 "hoc4.y"
{code(mul);;
    break;}
case 37:
#line 119 "hoc4.y"
{code(cruz);;
    break;}
case 38:
#line 120 "hoc4.y"
{code(gt);;
    break;}
case 39:
#line 121 "hoc4.y"
{code(ge);;
    break;}
case 40:
#line 122 "hoc4.y"
{code(lt);;
    break;}
case 41:
#line 123 "hoc4.y"
{code(le);;
    break;}
case 42:
#line 124 "hoc4.y"
{code(eq);;
    break;}
case 43:
#line 125 "hoc4.y"
{code(ne);;
    break;}
case 44:
#line 126 "hoc4.y"
{code(and);;
    break;}
case 45:
#line 127 "hoc4.y"
{code(or);;
    break;}
case 46:
#line 128 "hoc4.y"
{yyval.inst = yyvsp[0].inst; code(not);;
    break;}
case 47:
#line 129 "hoc4.y"
{ yyval.inst = yyvsp[-3].inst; code3(call,(Inst)yyvsp[-4].sym,(Inst)yyvsp[-1].narg);;
    break;}
case 48:
#line 132 "hoc4.y"
{yyval.inst = progp;;
    break;}
case 49:
#line 135 "hoc4.y"
{code(prexpr);;
    break;}
case 50:
#line 136 "hoc4.y"
{yyval.inst  = code2(prstr,(Inst)yyvsp[0].sym);;
    break;}
case 51:
#line 137 "hoc4.y"
{code(prexpr);;
    break;}
case 52:
#line 138 "hoc4.y"
{code2(prstr,(Inst)yyvsp[0].sym);;
    break;}
case 53:
#line 141 "hoc4.y"
{yyvsp[0].sym->type=FUNCTION; indef =1;;
    break;}
case 54:
#line 142 "hoc4.y"
{code(procret);define(yyvsp[-4].sym);indef=0;;
    break;}
case 55:
#line 143 "hoc4.y"
{yyvsp[0].sym->type = PROCEDURE; indef = 1;;
    break;}
case 56:
#line 144 "hoc4.y"
{code(procret);define(yyvsp[-4].sym); indef=0;;
    break;}
case 60:
#line 153 "hoc4.y"
{yyval.narg=0;;
    break;}
case 61:
#line 154 "hoc4.y"
{yyval.narg = 1;;
    break;}
case 62:
#line 155 "hoc4.y"
{yyval.narg = yyvsp[-2].narg + 1;;
    break;}
case 63:
#line 158 "hoc4.y"
{Vector *v = creaVector(3);
											v->vec[0] = yyvsp[-3].val;
											v->vec[1] = yyvsp[-2].val;
											v->vec[2] = yyvsp[-1].val;
											yyval.sym = install("",VEC,v);;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_parse_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_parse_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_parse_LLOC.first_line;
      yylsp->first_column = YY_parse_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_parse_NERRS;

#ifdef YY_parse_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_parse_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_parse_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_parse_ERROR_VERBOSE */
	YY_parse_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_parse_CHAR == YYEOF)
	YYABORT;

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_parse_CHAR, yytname[yychar1]);
#endif

      YY_parse_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_parse_LSP_NEEDED
  yylsp--;
#endif

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
  *++yylsp = YY_parse_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 165 "hoc4.y"

#include <stdio.h>
#include <ctype.h>
#include <signal.h>
#include <setjmp.h>
#include <string.h>

char	*progname;
int 	lineno = 1;
jmp_buf  begin;
int 	indef;
char 	*infile;
FILE	*fin;
char	**gargv;
int 	gargc;
int 	c;/*global for use by warning()*/


int yylex (){
  	int c;
  	while ((c = getchar ()) == ' ' || c == '\t')  
  		/*SALTA BLANCOS*/;
 	if (c == EOF)                            
    	return 0;
  	if (isdigit (c)){
		double d;
      	ungetc (c, stdin);
      	scanf ("%lf", &yylval.val);
	    return NUMBER;
    }
	if(isalpha(c)){
		Symbol *s;
		char sbuf[200], *p=sbuf;
		do {
			*p++=c;
		} while ((c=getchar())!=EOF && isalnum(c));
		ungetc(c, stdin);
		*p='\0';
		if((s=lookup(sbuf))==(Symbol *)NULL)
			s=install(sbuf, INDEF,NULL);
		yylval.sym=s;   
        if(s->type == INDEF)
			return VAR;
        else 
            return s->type; 
	}
  	if(c == '\n')
		lineno++;
	if( c == '$'){ /*¿Argumento?*/
		int n = 0;
		while(isdigit(c=getc(fin)))
			n =  10 * n + c - '0';
		ungetc(c,fin);
		if(n == 0)
			execerror("strange $...", (char *)0);
		yylval.narg = n;
		return ARG;
	}
	if( c == '"'){/*cadena entrecomillada*/
		char sbuf[100], *p,*emalloc();
		for(p=sbuf;(c=getc(fin))!= '"';p++){
			if(c == '\n' || c == EOF)
				execerror("missing quote","");
			if(p >= sbuf + sizeof(sbuf) - 1){
				*p = '\0';
				execerror("string too long",sbuf);			
			}
			*p = backslash(c);
		}
		*p = 0;
		yylval.sym = (Symbol *)emalloc(strlen(sbuf)+1);
		strcpy(yylval.sym, sbuf);
		return STRING;
	}
	switch (c){
	case '>':	return follow('=',GE,GT);
	case '<':	return follow('=',LE,LT);
	case '=':	return follow('=',EQ,'=');
	case '!':	return follow('=',NE,NOT);
	case '|':	return follow('|',OR,'|');
	case '&':	return follow('&',AND,'&');
	case '\n':	lineno++; return '\n';
	default:	return c;
	}
  	return c;                                
}
follow (expect,ifyes,ifno)
{
	int c = getchar();

	if(c == expect)
		return ifyes;
	ungetc(c, stdin);
	return ifno;
}

void defonly(char *s)	/*advertencia en caso de definición ilegal*/
{
	if(!indef)
		execerror(s,"used outside definition");
}

void execerror(char *s, char *t){
	warning(s, t);
	longjmp(begin, 0);
}

void fpecatch(){
	execerror("excepcion de punto flotante", (char *)0);
}

int main (int argc, char *argv[]){	
   int i;
   void fpecatch();
   progname = argv[0];
   if(argc == 1){	/*fake an argument list*/
	static char *stdinonly[] = { "-"};
	gargv = stdinonly;
	gargc = 1;
   }else{
	gargv = argv +1;
	gargc = argc -1;
   }
   init();
   while(moreinput())
	run();
   return 0;
}

void moreinput()
{
	if(gargc--<=0)
		return 0;
	if(fin && fin !=stdin)
		fclose(fin);
	infile = *gargv++;
	lineno = 1;
	if(strcmp(infile,"-") == 0){
		fin = stdin;
		infile = 0;
	}else if((fin =fopen(infile,"r")) ==NULL){
		fprintf(stderr,"%s: cannot open %s\n",progname,infile);
		return moreinput();
	}
	return 1;
}

void run()/* ejecutar hasta al fin de archivo (EOF)*/
{
	setjmp(begin);
	signal(SIGFPE,fpecatch);
	for(initcode();yyparse();initcode())
		execute(progbase);
}

int yyerror (char *s) {
   printf("%s",s);
   return 0;
}

void backslash(c) /*obtener el siguiente caràcter con las \ interpretadas */
int c;
{
	char *index(); /* 'strchr()' en algunos sistemas */
	static char transtab[] ="b\bf\fn\nr\rt\t";
	if( c != '\\')
		return c;
	c = getc(fin);
	if( islower(c) && index(transtab,c))
		return index(transtab,c)[1];
	return c;
}


void warning(char *s, char *t)
{
	//fprintf (stderr, "%s: %s", progname, s);
	//if(t)
		//fprintf (stderr, " %s", t);
	//fprintf (stderr, "cerca de la linea %d\n", lineno);
}
